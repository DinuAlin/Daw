// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using Movie_Tracker.Data;
using System;

namespace Movie_Tracker.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider");

                    b.Property<string>("ProviderKey");

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider");

                    b.Property<string>("Name");

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Movie_Tracker.Models.Actor", b =>
                {
                    b.Property<long>("IdActor")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DataNastere");

                    b.Property<string>("Nume");

                    b.Property<string>("Prenume");

                    b.HasKey("IdActor");

                    b.ToTable("Actor");
                });

            modelBuilder.Entity("Movie_Tracker.Models.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");
                });

            modelBuilder.Entity("Movie_Tracker.Models.Compozitor", b =>
                {
                    b.Property<long>("IdCompozitor")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DataNastere");

                    b.Property<string>("Nume");

                    b.Property<string>("Prenume");

                    b.HasKey("IdCompozitor");

                    b.ToTable("Compozitor");
                });

            modelBuilder.Entity("Movie_Tracker.Models.Film", b =>
                {
                    b.Property<long>("IdFilm")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DataLansare");

                    b.Property<string>("Durata");

                    b.Property<string>("Gen");

                    b.Property<long?>("IdCompozitor");

                    b.Property<long?>("IdRegizor");

                    b.Property<long?>("IdRegizorNavigationId");

                    b.Property<long?>("IdScenarist");

                    b.HasKey("IdFilm");

                    b.HasIndex("IdCompozitor");

                    b.HasIndex("IdRegizorNavigationId");

                    b.HasIndex("IdScenarist");

                    b.ToTable("Film");
                });

            modelBuilder.Entity("Movie_Tracker.Models.FilmActor", b =>
                {
                    b.Property<long>("IdFilmActor")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("IdActor");

                    b.Property<long?>("IdFilm");

                    b.HasKey("IdFilmActor");

                    b.HasIndex("IdActor");

                    b.HasIndex("IdFilm");

                    b.ToTable("FilmActor");
                });

            modelBuilder.Entity("Movie_Tracker.Models.FilmProducator", b =>
                {
                    b.Property<long>("IdFilmProducator")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("IdFilm");

                    b.Property<long?>("IdProducator");

                    b.HasKey("IdFilmProducator");

                    b.HasIndex("IdFilm");

                    b.HasIndex("IdProducator");

                    b.ToTable("FilmProducator");
                });

            modelBuilder.Entity("Movie_Tracker.Models.Producator", b =>
                {
                    b.Property<long>("IdProducator")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DataNastere");

                    b.Property<string>("Nume");

                    b.Property<string>("Prenume");

                    b.HasKey("IdProducator");

                    b.ToTable("Producator");
                });

            modelBuilder.Entity("Movie_Tracker.Models.Regizor", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DataNastere");

                    b.Property<string>("Nume");

                    b.Property<string>("Prenume");

                    b.HasKey("Id");

                    b.ToTable("Regizor");
                });

            modelBuilder.Entity("Movie_Tracker.Models.Scenarist", b =>
                {
                    b.Property<long>("IdScenarist")
                        .ValueGeneratedOnAdd();

                    b.Property<DateTime?>("DataNastere");

                    b.Property<string>("Nume");

                    b.Property<string>("Prenume");

                    b.HasKey("IdScenarist");

                    b.ToTable("Scenarist");
                });

            modelBuilder.Entity("Movie_Tracker.Models.UserFilm", b =>
                {
                    b.Property<long>("IdUserFilm")
                        .ValueGeneratedOnAdd();

                    b.Property<long?>("IdFilm");

                    b.HasKey("IdUserFilm");

                    b.HasIndex("IdFilm");

                    b.ToTable("UserFilm");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Movie_Tracker.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Movie_Tracker.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Movie_Tracker.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Movie_Tracker.Models.ApplicationUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Movie_Tracker.Models.Film", b =>
                {
                    b.HasOne("Movie_Tracker.Models.Compozitor", "IdCompozitorNavigation")
                        .WithMany("Film")
                        .HasForeignKey("IdCompozitor");

                    b.HasOne("Movie_Tracker.Models.Regizor", "IdRegizorNavigation")
                        .WithMany("Film")
                        .HasForeignKey("IdRegizorNavigationId");

                    b.HasOne("Movie_Tracker.Models.Scenarist", "IdScenaristNavigation")
                        .WithMany("Film")
                        .HasForeignKey("IdScenarist");
                });

            modelBuilder.Entity("Movie_Tracker.Models.FilmActor", b =>
                {
                    b.HasOne("Movie_Tracker.Models.Actor", "IdActorNavigation")
                        .WithMany("FilmActor")
                        .HasForeignKey("IdActor");

                    b.HasOne("Movie_Tracker.Models.Film", "IdFilmNavigation")
                        .WithMany("FilmActor")
                        .HasForeignKey("IdFilm");
                });

            modelBuilder.Entity("Movie_Tracker.Models.FilmProducator", b =>
                {
                    b.HasOne("Movie_Tracker.Models.Film", "IdFilmNavigation")
                        .WithMany("FilmProducator")
                        .HasForeignKey("IdFilm");

                    b.HasOne("Movie_Tracker.Models.Producator", "IdProducatorNavigation")
                        .WithMany("FilmProducator")
                        .HasForeignKey("IdProducator");
                });

            modelBuilder.Entity("Movie_Tracker.Models.UserFilm", b =>
                {
                    b.HasOne("Movie_Tracker.Models.Film", "IdFilmNavigation")
                        .WithMany("UserFilm")
                        .HasForeignKey("IdFilm");
                });
#pragma warning restore 612, 618
        }
    }
}
